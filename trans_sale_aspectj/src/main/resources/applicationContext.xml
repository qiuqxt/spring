<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--2、引入属性配置文件 spring-context.xsd
        location: 指定属性配置文件的位置，使用classpath表示类路径
    -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--1、数据源配置-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--3、注册SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <!--指定mybatis主配置文件位置-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--动态代理对象-->
    <!--4、定义Mapper扫描配置器MapperScannerConfigurer-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName"  value="sqlSessionFactory"/>
        <property name="basePackage" value="com.albert.dao"/>
    </bean>
    <!--声明service对象-->
    <bean id="buyGoodsService" class="com.albert.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>
    </bean>

    <!--          使用 AspectJ 的 AOP 配置管理事务(掌握)             -->
    <!-- 1、声明事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!-- 2、配置事务通知 -->
    <!--事务通知（切面）-->
    <tx:advice id="buyAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException, com.albert.excep.NotEnoughException"/>
            <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException, com.albert.excep.NotEnoughException"/>
        </tx:attributes>
    </tx:advice>

    <!-- 3、配置增强器 -->
    <!-- aop配置，通知应用的切入点-->
    <aop:config>
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--声明增强器：通知和切入点的组合-->
        <aop:advisor advice-ref="buyAdvice" pointcut-ref="servicePt"/>
    </aop:config>
    <!---->

</beans>